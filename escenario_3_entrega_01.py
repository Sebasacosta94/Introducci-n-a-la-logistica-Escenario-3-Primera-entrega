# -*- coding: utf-8 -*-
"""Escenario 3-Entrega 01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UaP_j2IIcS2Frc9dMuTkqh2BwpjZPvz0

# **Escenario 03: Primera Entrega**

# **Método de Gravedad**

A continuación en el siguiente cuaderno de Jupyter, mostraré las visualizaciones correspondientes al método de gravedad.

En primer lugar se podrá visualizar la ubicación del Centroide, Luego se puede visualizar un tablero dinámico con las distancias que hay entre las ciudades propuestas en la actividad y el centroide. Finalmente se podrán visualizar las distancias que hay desde la ciudad que hemos definido respecto a las ciudades propuestas inicialmente.
"""

# @title
!pip install folium

"""# **1.Centroide**"""

# @title
import folium

# Coordenadas de Zaragoza, Antioquia
lat, lon = 7.4897, -74.8675

# Crear el mapa centrado en Zaragoza
mapa = folium.Map(location=[lat, lon], zoom_start=10)

# Agregar un marcador en Zaragoza
folium.Marker(
    location=[lat, lon],
    popup="Zaragoza, Antioquia",
    tooltip="Clic para más información",
    icon=folium.Icon(color="red", icon="info-sign")
).add_to(mapa)

# Mostrar el mapa
mapa

"""# **2. Distancias entre Zaragoza y las ciudades propuestas**"""

# @title
!pip install folium dash jupyter-dash geopy

# @title
!pip install folium

import folium
from folium.features import GeoJson

# Coordenadas de Zaragoza, Antioquia
zaragoza_lat, zaragoza_lon = 7.4897, -74.8675

# Datos de las ciudades: nombre, latitud, longitud, distancia en km
# NOTA: Las coordenadas de las ciudades son aproximadas.
ciudades = [
    {"nombre": "Armenia", "lat": 4.5339, "lon": -75.6811, "distancia": 530},
    {"nombre": "Bucaramanga", "lat": 7.1254, "lon": -73.1198, "distancia": 404},
    {"nombre": "Neiva", "lat": 2.9333, "lon": -75.2833, "distancia": 698},
    {"nombre": "Santa Marta", "lat": 11.2408, "lon": -74.1990, "distancia": 592},
    {"nombre": "Medellín", "lat": 6.2442, "lon": -75.5812, "distancia": 246},
    {"nombre": "Barranquilla", "lat": 10.9685, "lon": -74.7813, "distancia": 506},
    {"nombre": "Tunja", "lat": 5.5353, "lon": -73.3670, "distancia": 434},
    {"nombre": "Valledupar", "lat": 10.4631, "lon": -73.2536, "distancia": 671}
]

# Crear el mapa centrado en Zaragoza
mapa = folium.Map(location=[zaragoza_lat, zaragoza_lon], zoom_start=7)

# Marcador para Zaragoza
folium.Marker(
    location=[zaragoza_lat, zaragoza_lon],
    popup="Zaragoza, Antioquia",
    tooltip="Zaragoza, Antioquia",
    icon=folium.Icon(color="green", icon="star")
).add_to(mapa)

# Agregar marcadores para las ciudades y líneas con popups
for ciudad in ciudades:
    # Marcador para la ciudad
    folium.Marker(
        location=[ciudad["lat"], ciudad["lon"]],
        popup=f"{ciudad['nombre']}<br>Distancia: {ciudad['distancia']} km",
        tooltip=ciudad["nombre"],
        icon=folium.Icon(color="blue", icon="info-sign")
    ).add_to(mapa)

    # Definir la geometría de la línea como GeoJSON
    linea_geojson = {
        "type": "Feature",
        "properties": {
            "popup": f"Distancia: {ciudad['distancia']} km"
        },
        "geometry": {
            "type": "LineString",
            "coordinates": [
                [zaragoza_lon, zaragoza_lat],
                [ciudad["lon"], ciudad["lat"]]
            ]
        }
    }

    # Agregar la línea como GeoJson para que muestre popup al hacer clic
    geojson_line = GeoJson(
        data=linea_geojson,
        style_function=lambda x: {
            "color": "red",
            "weight": 2,
            "opacity": 0.6
        }
    )
    geojson_line.add_child(folium.Popup(f"Distancia: {ciudad['distancia']} km"))
    geojson_line.add_to(mapa)

mapa

"""# **3.Distancia de Medellin a las otras ciudades propuestas**"""

# @title
import folium
from folium.features import GeoJson

# Coordenadas de Medellín, Colombia
medellin_lat, medellin_lon = 6.2447, -75.5747

# Datos de las ciudades: nombre, latitud, longitud, distancia en km
ciudades = [
    {"nombre": "Armenia", "lat": 4.5339, "lon": -75.6811, "distancia": 185},
    {"nombre": "Bucaramanga", "lat": 7.1254, "lon": -73.1198, "distancia": 383},
    {"nombre": "Neiva", "lat": 2.9333, "lon": -75.2833, "distancia": 550},
    {"nombre": "Santa Marta", "lat": 11.2408, "lon": -74.1990, "distancia": 680},
    {"nombre": "Barranquilla", "lat": 10.9685, "lon": -74.7813, "distancia": 650},
    {"nombre": "Tunja", "lat": 5.5353, "lon": -73.3670, "distancia": 400},
    {"nombre": "Valledupar", "lat": 10.4631, "lon": -73.2536, "distancia": 550}
]

# Crear el mapa centrado en Medellín
mapa = folium.Map(location=[medellin_lat, medellin_lon], zoom_start=7)

# Marcador para Medellín
folium.Marker(
    location=[medellin_lat, medellin_lon],
    popup="Medellín, Colombia",
    tooltip="Medellín, Colombia",
    icon=folium.Icon(color="green", icon="star")
).add_to(mapa)

# Agregar marcadores para las ciudades y líneas con popups de distancias
for ciudad in ciudades:
    # Marcador para la ciudad
    folium.Marker(
        location=[ciudad["lat"], ciudad["lon"]],
        popup=f"{ciudad['nombre']}<br>Distancia: {ciudad['distancia']} km",
        tooltip=ciudad["nombre"],
        icon=folium.Icon(color="blue", icon="info-sign")
    ).add_to(mapa)

    # Definir la geometría de la línea como GeoJSON
    linea_geojson = {
        "type": "Feature",
        "properties": {
            "popup": f"Distancia: {ciudad['distancia']} km"
        },
        "geometry": {
            "type": "LineString",
            "coordinates": [
                [medellin_lon, medellin_lat],
                [ciudad["lon"], ciudad["lat"]]
            ]
        }
    }

    # Agregar la línea como GeoJson para que muestre popup al hacer clic
    geojson_line = GeoJson(
        data=linea_geojson,
        style_function=lambda x: {
            "color": "red",
            "weight": 2,
            "opacity": 0.6
        }
    )
    geojson_line.add_child(folium.Popup(f"Distancia: {ciudad['distancia']} km"))
    geojson_line.add_to(mapa)

mapa

"""# **Gráficos**"""

# @title
# Instalar plotly si no está instalado
!pip install plotly

# Importar las bibliotecas necesarias
import plotly.express as px
import pandas as pd

# @title
# Crear un DataFrame con los datos proporcionados
data = {
    "Departamento-Ciudad": ["Quindío-Armenia", "Santander-Bucaramanga", "Huila-Neiva", "Magdalena-Santa Marta",
                            "Antioquia-Medellin", "Atlántico-Barranquilla", "Boyacá-Tunja", "Cesar-Valledupar"],
    "Latitud": [4.5338, 7.1254, 2.9273, 11.2408, 6.2442, 10.9685, 5.5397, 10.4623],
    "Longitud": [-75.681, -73.1198, -75.2819, -74.2096, -75.5812, -74.7813, -73.3677, -73.2505]
}

df = pd.DataFrame(data)

# Añadir el centroide como un punto adicional
centroide = {"Departamento-Ciudad": "Centroide", "Latitud": 7.3689, "Longitud": -74.7073}
df = pd.concat([df, pd.DataFrame([centroide])], ignore_index=True)

# Mostrar el DataFrame para verificar
print(df)

"""# **Diagrama de dispersión entre el Centroide y las ciudades propuestas.**"""

# @title
# Crear el diagrama de dispersión interactivo
fig = px.scatter(
    df,
    x="Longitud",
    y="Latitud",
    text="Departamento-Ciudad",
    title="Diagrama de Dispersión de Ciudades y Centroide",
    color="Departamento-Ciudad",  # Color por categoría
    color_discrete_map={"Centroide": "orange"},  # Color naranja para el centroide
)

# Personalizar el fondo y el estilo del gráfico
fig.update_layout(
    plot_bgcolor="black",  # Fondo negro
    paper_bgcolor="black",  # Fondo del área exterior negro
    font=dict(color="white"),  # Texto en blanco para mejor contraste
    title_font=dict(color="white"),  # Título en blanco
)

# Añadir etiquetas a los puntos
fig.update_traces(textposition='top center')

# Mostrar el gráfico
fig.show()

"""# **Gráfica de barras entre las ciudades y los costos tottales asociados entre ellas**"""

# @title
import pandas as pd
import plotly.express as px

# Datos proporcionados (sin comas en los valores numéricos)
data = {
    "Ciudad": ["Armenia", "Bucaramanga", "Neiva", "Santa Marta", "Medellin", "Barranquilla", "Boyacá", "Valledupar"],
    "Costo Total": [11768.961, 6305.245, 17583.205, 15325.978, 5592.065, 14134.874, 8901.294, 13423.829]
}

# Crear el DataFrame
df_costos = pd.DataFrame(data)

# Crear la gráfica de barras interactiva
fig = px.bar(
    df_costos,
    x="Ciudad",
    y="Costo Total",
    title="Costos Totales por Ciudad",
    labels={"Costo Total": "Costo Total ($)", "Ciudad": "Ciudades"},  # Etiquetas de los ejes
    text="Costo Total",  # Mostrar el valor de cada barra
    color="Ciudad",  # Colorear las barras según la ciudad
)

# Personalizar el diseño
fig.update_layout(
    plot_bgcolor="black",  # Fondo negro del gráfico
    paper_bgcolor="black",  # Fondo negro del área exterior
    font=dict(color="white"),  # Texto en blanco
    title_font=dict(color="white"),  # Título en blanco
    xaxis=dict(title_font=dict(color="white"), tickfont=dict(color="white")),  # Eje X en blanco
    yaxis=dict(title_font=dict(color="white"), tickfont=dict(color="white")),  # Eje Y en blanco
)

# Mostrar los valores en las barras con el signo "$"
fig.update_traces(texttemplate='$%{text:.2f}', textposition='outside')

# Mostrar la gráfica
fig.show()

"""# **Método Algoritmo ADD**

# **Costo Total según las ciudades según la interacción 1**
"""

# @title
import plotly.graph_objects as go

# Datos
ciudades = ["Armenia", "Bucaramanga", "Neiva", "Santa Marta", "Medellin", "Barranquilla", "Tunja", "Valledupar"]
costo_total = [65075249, 63610042, 66485613, 80072540, 76480113, 52096283, 70588701, 72589817]

# Crear la figura
fig = go.Figure()
fig.add_trace(go.Bar(
    x=ciudades,
    y=costo_total,
    marker=dict(color='cyan'),
    text=[f'${x:,.0f}' for x in costo_total],
    textposition='outside'
))

# Personalización del diseño
fig.update_layout(
    title="Costo Total por Ciudad",
    xaxis_title="Ciudades",
    yaxis_title="Costo Total (USD)",
    template="plotly_dark",
    plot_bgcolor='black',
    paper_bgcolor='black'
)

# Mostrar la figura
fig.show()

"""# **Costo total según las ciudades propuestas en la interacción 2**"""

# @title
import plotly.graph_objects as go

# Datos
ciudades = [
    "Barranquilla-Armenia", "Barranquilla-Bucaramanga", "Barranquilla-Neiva",
    "Barranquilla-Santa Marta", "Barranquilla-Medellin", "Barranquilla-Tunja", "Barranquilla-Valledupar"
]
costo_total = [
    122321888, 97293385, 123049128, 139588407, 108820764, 129735524, 133703566
]

# Crear la figura
fig = go.Figure()
fig.add_trace(go.Bar(
    x=ciudades,
    y=costo_total,
    marker=dict(color='cyan'),
    text=[f'${x:,.0f}' for x in costo_total],
    textposition='outside'
))

# Personalización del diseño
fig.update_layout(
    title="Costo Total por Ciudad (Barranquilla y Otras)",
    xaxis_title="Ciudades",
    yaxis_title="Costo Total (USD)",
    template="plotly_dark",
    plot_bgcolor='black',
    paper_bgcolor='black'
)

# Mostrar la figura
fig.show()

"""# **Costos de transporte definidos según cada ciudad**"""

# @title
import plotly.graph_objects as go

# Datos
ciudades = [
    "Armenia", "Bucaramanga", "Neiva",
    "Santa Marta", "Medellin", "Barranquilla", "Tunja", "Valledupar"
]
costo_transporte = [
    1028612, 1817738, 4471714, 365118, 3160430, 0, 2932722, 1173874
]

# Crear la figura
fig = go.Figure()
fig.add_trace(go.Bar(
    x=ciudades,
    y=costo_transporte,
    marker=dict(color='orange'),
    text=[f'${x:,.0f}' for x in costo_transporte],
    textposition='outside'
))

# Personalización del diseño
fig.update_layout(
    title="Costo de Transporte por Ciudad",
    xaxis_title="Ciudades",
    yaxis_title="Costo de Transporte (USD)",
    template="plotly_dark",
    plot_bgcolor='black',
    paper_bgcolor='black'
)

# Mostrar la figura
fig.show()